(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@lamis/web-core'), require('rxjs/operators'), require('moment'), require('@angular/router'), require('@alfresco/adf-core'), require('@angular/material'), require('@angular/flex-layout'), require('@angular/common'), require('rxjs'), require('@covalent/core'), require('ng-jhipster'), require('@swimlane/ngx-datatable'), require('@ng-bootstrap/ng-bootstrap')) :
		typeof define === 'function' && define.amd ? define('@lamis/patient', ['exports', '@angular/core', '@angular/common/http', '@lamis/web-core', 'rxjs/operators', 'moment', '@angular/router', '@alfresco/adf-core', '@angular/material', '@angular/flex-layout', '@angular/common', 'rxjs', '@covalent/core', 'ng-jhipster', '@swimlane/ngx-datatable', '@ng-bootstrap/ng-bootstrap'], factory) :
			(global = global || self, factory((global.lamis = global.lamis || {}, global.lamis.patient = {}), global.ng.core, global.ng.common.http, global.webCore, global.rxjs.operators, global.moment_, global.ng.router, global.adfCore, global.ng.material, global.ng['flex-layout'], global.ng.common, global.rxjs, global.core$1, global.ngJhipster, global.ngxDatatable, global.ngBootstrap));
}(this, function (exports, core, http, webCore, operators, moment_, router, adfCore, material, flexLayout, common, rxjs, core$1, ngJhipster, ngxDatatable, ngBootstrap) { 'use strict';

	/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
		extendStatics = Object.setPrototypeOf ||
			({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
			function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
		return extendStatics(d, b);
	};

	function __extends(d, b) {
		extendStatics(d, b);
		function __() { this.constructor = d; }
		d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	var __assign = function() {
		__assign = Object.assign || function __assign(t) {
			for (var s, i = 1, n = arguments.length; i < n; i++) {
				s = arguments[i];
				for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
			}
			return t;
		};
		return __assign.apply(this, arguments);
	};

	function __rest(s, e) {
		var t = {};
		for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
			t[p] = s[p];
		if (s != null && typeof Object.getOwnPropertySymbols === "function")
			for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
				if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
					t[p[i]] = s[p[i]];
			}
		return t;
	}

	function __decorate(decorators, target, key, desc) {
		var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
		if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
		else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
		return c > 3 && r && Object.defineProperty(target, key, r), r;
	}

	function __param(paramIndex, decorator) {
		return function (target, key) { decorator(target, key, paramIndex); }
	}

	function __metadata(metadataKey, metadataValue) {
		if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	}

	function __awaiter(thisArg, _arguments, P, generator) {
		return new (P || (P = Promise))(function (resolve, reject) {
			function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
			function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
			function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	}

	function __generator(thisArg, body) {
		var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
		return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
		function verb(n) { return function (v) { return step([n, v]); }; }
		function step(op) {
			if (f) throw new TypeError("Generator is already executing.");
			while (_) try {
				if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
				if (y = 0, t) op = [op[0] & 2, t.value];
				switch (op[0]) {
					case 0: case 1: t = op; break;
					case 4: _.label++; return { value: op[1], done: false };
					case 5: _.label++; y = op[1]; op = [0]; continue;
					case 7: op = _.ops.pop(); _.trys.pop(); continue;
					default:
						if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
						if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
						if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
						if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
						if (t[2]) _.ops.pop();
						_.trys.pop(); continue;
				}
				op = body.call(thisArg, _);
			} catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
			if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
		}
	}

	function __exportStar(m, exports) {
		for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
	}

	function __values(o) {
		var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
		if (m) return m.call(o);
		return {
			next: function () {
				if (o && i >= o.length) o = void 0;
				return { value: o && o[i++], done: !o };
			}
		};
	}

	function __read(o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o), r, ar = [], e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		}
		catch (error) { e = { error: error }; }
		finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			}
			finally { if (e) throw e.error; }
		}
		return ar;
	}

	function __spread() {
		for (var ar = [], i = 0; i < arguments.length; i++)
			ar = ar.concat(__read(arguments[i]));
		return ar;
	}

	function __spreadArrays() {
		for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
		for (var r = Array(s), k = 0, i = 0; i < il; i++)
			for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
				r[k] = a[j];
		return r;
	};

	function __await(v) {
		return this instanceof __await ? (this.v = v, this) : new __await(v);
	}

	function __asyncGenerator(thisArg, _arguments, generator) {
		if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
		var g = generator.apply(thisArg, _arguments || []), i, q = [];
		return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
		function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
		function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
		function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
		function fulfill(value) { resume("next", value); }
		function reject(value) { resume("throw", value); }
		function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
	}

	function __asyncDelegator(o) {
		var i, p;
		return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
		function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
	}

	function __asyncValues(o) {
		if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
		var m = o[Symbol.asyncIterator], i;
		return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
		function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
		function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
	}

	function __makeTemplateObject(cooked, raw) {
		if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
		return cooked;
	};

	function __importStar(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
		result.default = mod;
		return result;
	}

	function __importDefault(mod) {
		return (mod && mod.__esModule) ? mod : { default: mod };
	}

	var moment = moment_;
	var PatientService = /** @class */ (function () {
		function PatientService(http, serverUrl) {
			this.http = http;
			this.serverUrl = serverUrl;
			this.resourceUrl = '';
			this.resourceSearchUrl = '';
			this.resourceUrl = serverUrl.SERVER_API_URL + '/api/patients';
			this.resourceSearchUrl = serverUrl.SERVER_API_URL + '/api/_search/patients';
		}
		PatientService.prototype.create = function (patient) {
			var _this = this;
			var copy = this.convertDateFromClient(patient);
			return this.http
				.post(this.resourceUrl, copy, { observe: 'response' })
				.pipe(operators.map(function (res) { return _this.convertDateFromServer(res); }));
		};
		PatientService.prototype.update = function (patient) {
			var _this = this;
			var copy = this.convertDateFromClient(patient);
			return this.http
				.put(this.resourceUrl, copy, { observe: 'response' })
				.pipe(operators.map(function (res) { return _this.convertDateFromServer(res); }));
		};
		PatientService.prototype.find = function (id) {
			var _this = this;
			return this.http
				.get(this.resourceUrl + "/" + id, { observe: 'response' })
				.pipe(operators.map(function (res) { return _this.convertDateFromServer(res); }));
		};
		PatientService.prototype.query = function (req) {
			var _this = this;
			var options = webCore.createRequestOption(req);
			return this.http
				.get(this.resourceUrl, { params: options, observe: 'response' })
				.pipe(operators.map(function (res) { return _this.convertDateArrayFromServer(res); }));
		};
		PatientService.prototype.delete = function (id) {
			return this.http.delete(this.resourceUrl + "/" + id, { observe: 'response' });
		};
		PatientService.prototype.search = function (req) {
			var _this = this;
			var options = webCore.createRequestOption(req);
			return this.http
				.post(this.resourceSearchUrl, req, { params: options, observe: 'response' })
				.pipe(operators.map(function (res) { return _this.convertDateArrayFromServer(res); }));
		};
		PatientService.prototype.reindex = function () {
			return this.http.get(this.resourceUrl + '/re-index');
		};
		PatientService.prototype.convertDateFromClient = function (patient) {
			var copy = Object.assign({}, patient, {
				dob: patient.dateBirth != null && patient.dateBirth.isValid() ? patient.dateBirth.format(webCore.DATE_FORMAT) : null,
				dod: patient.dateRegistration != null && patient.dateRegistration.isValid() ? patient.dateRegistration.format(webCore.DATE_FORMAT) : null
			});
			return copy;
		};
		PatientService.prototype.convertDateFromServer = function (res) {
			if (res.body) {
				res.body.name = res.body.surname + ', ' + res.body.otherNames;
				res.body.dateBirth = res.body.dateBirth != null ? moment(res.body.dateBirth) : null;
				res.body.dateRegistration = res.body.dateRegistration != null ? moment(res.body.dateRegistration) : null;
			}
			return res;
		};
		PatientService.prototype.convertDateArrayFromServer = function (res) {
			if (res.body) {
				res.body.forEach(function (patient) {
					patient.name = patient.surname + ', ' + patient.otherNames;
					patient.dateBirth = patient.dateBirth != null ? moment(patient.dateBirth) : null;
					patient.dateRegistration = patient.dateRegistration != null ? moment(patient.dateRegistration) : null;
				});
			}
			return res;
		};
		PatientService.ctorParameters = function () { return [
			{ type: http.HttpClient },
			{ type: undefined, decorators: [{ type: core.Inject, args: [webCore.SERVER_API_URL_CONFIG,] }] }
		]; };
		PatientService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function PatientService_Factory() { return new PatientService(core.ɵɵinject(http.HttpClient), core.ɵɵinject(webCore.SERVER_API_URL_CONFIG)); }, token: PatientService, providedIn: "root" });
		PatientService = __decorate([
			core.Injectable({ providedIn: 'root' }),
			__param(1, core.Inject(webCore.SERVER_API_URL_CONFIG)),
			__metadata("design:paramtypes", [http.HttpClient, Object])
		], PatientService);
		return PatientService;
	}());

	var PatientListComponent = /** @class */ (function () {
		function PatientListComponent(patientService, notification, router, activatedRoute) {
			this.patientService = patientService;
			this.notification = notification;
			this.router = router;
			this.activatedRoute = activatedRoute;
			this.page = 0;
			this.rows = new Array();
			this.loading = false;
			this.itemsPerPage = 10;
			this.currentSearch = '';
			this.totalItems = 0;
			this.links = [
				{
					state: 'patients',
					icon: 'person_outline',
					tooltip: 'Add new Patient',
					roles: ['']
				}
			];
			this.display = 'list';
			this.currentSearch = '';
		}
		PatientListComponent.prototype.ngOnDestroy = function () {
		};
		PatientListComponent.prototype.ngOnInit = function () {
			this.onPageChange(0);
		};
		PatientListComponent.prototype.searchPatient = function (search) {
			this.currentSearch = search;
			this.page = 0;
			this.loadAll();
		};
		PatientListComponent.prototype.select = function (data) {
			if (!!this.path) {
				this.router.navigateByUrl(this.path + "/" + data.obj.id);
			}
			else {
				this.router.navigate(['..', 'patients', data.obj.id, 'view'], { relativeTo: this.activatedRoute });
			}
		};
		PatientListComponent.prototype.onPageChange = function (pageInfo) {
			this.page = pageInfo;
			this.loadAll();
		};
		PatientListComponent.prototype.loadPage = function (page) {
			if (page !== this.page) {
				this.page = page;
				this.loadAll();
			}
		};
		PatientListComponent.prototype.loadAll = function () {
			var _this = this;
			this.loading = true;
			this.patientService.search({
				query: this.currentSearch,
				page: this.page,
				size: this.itemsPerPage,
				sort: ['id', 'asc']
			}).subscribe(function (res) {
				_this.onSuccess(res.body, res.headers);
			}, function (res) { return _this.onError(res); });
		};
		PatientListComponent.prototype.onSuccess = function (data, headers) {
			this.patients = data;
			this.totalItems = headers.get('X-Total-Count');
			this.rows = data;
			this.loading = false;
		};
		PatientListComponent.prototype.onError = function (error) {
			this.notification.openSnackMessage(error.message);
			this.loading = false;
		};
		PatientListComponent.ctorParameters = function () { return [
			{ type: PatientService },
			{ type: adfCore.NotificationService },
			{ type: router.Router },
			{ type: router.ActivatedRoute }
		]; };
		__decorate([
			core.Input(),
			__metadata("design:type", String)
		], PatientListComponent.prototype, "path", void 0);
		PatientListComponent = __decorate([
			core.Component({
				selector: 'lamis-patients',
				template: "<div class=\"layout\">\r\n    <div class=\"list-container\">\r\n        <div class=\"row\">\r\n            <div class=\"col-md-8 col-md-offset-4\">\r\n                <div class=\"adf-toolbar--spacer\"></div>\r\n                <td-search-box backIcon=\"arrow_back\" class=\"push-right-sm\"\r\n                               placeholder=\"Search here\" [debounce]=\"500\"\r\n                               [(ngModel)]=\"currentSearch\"\r\n                               (searchDebounce)=\"searchPatient($event)\"\r\n                               (search)=\"searchPatient($event)\"\r\n                               (clear)=\"currentSearch = ''\" flex>\r\n                </td-search-box>\r\n            </div>\r\n        </div>\r\n        <br/>\r\n        <adf-datatable *ngIf=\"patients\"\r\n                       [rows]=\"patients\"\r\n                       [loading]=\"loading\"\r\n                       [display]=\"display\"\r\n                       (rowClick)=\"select($event.value)\">\r\n            <data-columns>\r\n                <data-column key=\"name\" title=\"Name\" sortable=\"true\"></data-column>\r\n                <data-column title=\"Biometric\" key=\"biometric\" sortable=\"true\" class=\"full-width ellipsis-cell\">\r\n                    <ng-template let-context=\"$implicit\">\r\n                        <mat-checkbox disabled [checked]=\"context.row.getValue('biometric')\"></mat-checkbox>\r\n                    </ng-template>\r\n                </data-column>\r\n                <data-column key=\"hospitalNum\" title=\"Hospital Num.\" sortable=\"true\"></data-column>\r\n                <data-column key=\"uniqueId\" title=\"Unique ID\" sortable=\"true\"></data-column>\r\n                <data-column key=\"gender\" title=\"Gender\" sortable=\"true\"></data-column>\r\n                <data-column key=\"currentStatus\" title=\"Current Status\" sortable=\"true\"></data-column>\r\n                <data-column key=\"address\" title=\"Address\" class=\"full-width ellipsis-cell\"></data-column>\r\n            </data-columns>\r\n            <adf-loading-content-template>\r\n                <ng-template>\r\n                    <mat-progress-spinner\r\n                            class=\"adf-document-list-loading-margin\"\r\n                            [color]=\"'primary'\"\r\n                            [mode]=\"'indeterminate'\">\r\n                    </mat-progress-spinner>\r\n                </ng-template>\r\n            </adf-loading-content-template>\r\n        </adf-datatable>\r\n    </div>\r\n    <adf-empty-content\r\n            *ngIf=\"!patients\"\r\n            icon=\"blur_on\"\r\n            [title]=\"'No Patients found'\"\r\n            [subtitle]=\"'No Patients matching search criteria or no Patients available'\">\r\n    </adf-empty-content>\r\n        <ngb-pagination [collectionSize]=\"totalItems\"\r\n                        [(page)]=\"page\"\r\n                        [pageSize]=\"itemsPerPage\"\r\n                        [maxSize]=\"5\"\r\n                        size=\"sm\"\r\n                        [rotate]=\"true\"\r\n                        [boundaryLinks]=\"true\"\r\n                        (pageChange)=\"loadPage(page)\">\r\n        </ngb-pagination>\r\n\r\n</div>\r\n<speed-dial *ngIf=\"!path\" [links]=\"links\"></speed-dial>\r\n"
			}),
			__metadata("design:paramtypes", [PatientService,
				adfCore.NotificationService,
				router.Router,
				router.ActivatedRoute])
		], PatientListComponent);
		return PatientListComponent;
	}());

	var PatientDetailsComponent = /** @class */ (function () {
		function PatientDetailsComponent(router, route) {
			this.router = router;
			this.route = route;
			this.template = 'patient-details';
		}
		PatientDetailsComponent.prototype.ngOnInit = function () {
			var _this = this;
			this.route.data.subscribe(function (_a) {
				var entity = _a.entity;
				_this.entity = !!entity && entity.body ? entity.body : entity;
			});
		};
		PatientDetailsComponent.prototype.previousState = function () {
			window.history.back();
		};
		PatientDetailsComponent.ctorParameters = function () { return [
			{ type: router.Router },
			{ type: router.ActivatedRoute }
		]; };
		PatientDetailsComponent = __decorate([
			core.Component({
				selector: 'lamis-patient',
				template: "<div class=\"lamis-edit-form\">\r\n    <div class=\"lamis-edit-form-container\">\r\n        <details-component [template]=\"template\"\r\n                           [model]=\"entity\">\r\n        </details-component>\r\n        <mat-card>\r\n            <mat-card-content>\r\n                <mat-card-actions class=\"lamis-edit-form-actions\">\r\n                    <button mat-raised-button (click)=\"previousState()\">Back</button>\r\n                    <a mat-button mat-raised-button color=\"primary\"\r\n                       [routerLink]=\"['..', 'edit']\">Edit</a>\r\n                </mat-card-actions>\r\n            </mat-card-content>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n"
			}),
			__metadata("design:paramtypes", [router.Router, router.ActivatedRoute])
		], PatientDetailsComponent);
		return PatientDetailsComponent;
	}());

	var PatientEditComponent = /** @class */ (function () {
		function PatientEditComponent(patientService, notification, activatedRoute) {
			this.patientService = patientService;
			this.notification = notification;
			this.activatedRoute = activatedRoute;
			this.template = 'patient-edit';
			this.error = false;
		}
		PatientEditComponent.prototype.onData = function (data) {
			this.entity = data;
		};
		PatientEditComponent.prototype.createEntity = function () {
			return {};
		};
		PatientEditComponent.prototype.ngOnInit = function () {
			var _this = this;
			this.isSaving = false;
			this.activatedRoute.data.subscribe(function (_a) {
				var entity = _a.entity;
				_this.entity = !!entity && entity.body ? entity.body : entity;
				if (_this.entity === undefined) {
					_this.entity = _this.createEntity();
				}
			});
		};
		PatientEditComponent.prototype.previousState = function () {
			window.history.back();
		};
		PatientEditComponent.prototype.save = function () {
			this.submitButton.disabled = true;
			//this.progressBar.mode = 'indeterminate';
			this.isSaving = true;
			if (this.entity.id !== undefined) {
				this.subscribeToSaveResponse(this.patientService.update(this.entity));
			}
			else {
				this.subscribeToSaveResponse(this.patientService.create(this.entity));
			}
		};
		PatientEditComponent.prototype.subscribeToSaveResponse = function (result) {
			var _this = this;
			result.subscribe(function (res) { return _this.onSaveSuccess(res.body); }, function (res) {
				_this.onSaveError();
				_this.onError(res.message);
			});
		};
		PatientEditComponent.prototype.onSaveSuccess = function (result) {
			this.isSaving = false;
			this.notification.openSnackMessage('Patient successfully saved');
			this.previousState();
		};
		PatientEditComponent.prototype.onSaveError = function () {
			this.isSaving = false;
			this.error = true;
			this.submitButton.disabled = true;
			//this.progressBar.mode = 'determinate';
		};
		PatientEditComponent.prototype.onError = function (errorMessage) {
			this.notification.showError(errorMessage);
		};
		PatientEditComponent.ctorParameters = function () { return [
			{ type: PatientService },
			{ type: adfCore.NotificationService },
			{ type: router.ActivatedRoute }
		]; };
		__decorate([
			core.ViewChild(material.MatButton, { static: true }),
			__metadata("design:type", material.MatButton)
		], PatientEditComponent.prototype, "submitButton", void 0);
		PatientEditComponent = __decorate([
			core.Component({
				selector: 'lamis-patient-edit',
				template: "<div class=\"lamis-edit-form\">\r\n    <div class=\"lamis-edit-form-container\">\r\n        <mat-card class=\"default\">\r\n            <mat-progress-bar mode=\"determinate\" class=\"session-progress\"></mat-progress-bar>\r\n            <mat-card-content>\r\n                <td-message label=\"Saving failed!\" sublabel=\"Please try again later.\"\r\n                            color=\"warn\" icon=\"error\" *ngIf=\"error\">\r\n                </td-message>\r\n                <json-form #form [model]=\"entity\"\r\n                           [template]=\"template\"\r\n                           (dataEvent)=\"onData($event)\">\r\n                </json-form>\r\n                <mat-card-actions class=\"lamis-edit-form-actions\">\r\n                    <button mat-raised-button (click)=\"previousState()\">Back</button>\r\n                    <button mat-raised-button color='primary'\r\n                            [disabled]=\"!form.isValid\"\r\n                            (click)=\"save()\">\r\n                        {{entity.id !== undefined ? 'Update' : 'Save'}}\r\n                    </button>\r\n                </mat-card-actions>\r\n            </mat-card-content>\r\n        </mat-card>\r\n    </div>\r\n</div>\r\n"
			}),
			__metadata("design:paramtypes", [PatientService,
				adfCore.NotificationService,
				router.ActivatedRoute])
		], PatientEditComponent);
		return PatientEditComponent;
	}());

	var PatientResolve = /** @class */ (function () {
		function PatientResolve(service) {
			this.service = service;
		}
		PatientResolve.prototype.resolve = function (route, state) {
			var id = route.params['id'] ? route.params['id'] : null;
			if (id) {
				return this.service.find(id).pipe(operators.filter(function (response) { return response.ok; }), operators.map(function (patient) { return patient.body; }));
			}
			return rxjs.of({});
		};
		PatientResolve.ctorParameters = function () { return [
			{ type: PatientService }
		]; };
		PatientResolve.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function PatientResolve_Factory() { return new PatientResolve(core.ɵɵinject(PatientService)); }, token: PatientResolve, providedIn: "root" });
		PatientResolve = __decorate([
			core.Injectable({ providedIn: 'root' }),
			__metadata("design:paramtypes", [PatientService])
		], PatientResolve);
		return PatientResolve;
	}());
	var ɵ0 = {
		title: 'Patients',
		breadcrumb: 'PATIENTS'
	}, ɵ1 = {}, ɵ2 = {
		authorities: ['ROLE_USER'],
		title: 'Patient Details',
		breadcrumb: 'PATIENT DETAILS'
	}, ɵ3 = {
		authorities: ['ROLE_DEC'],
		title: 'Add Patient',
		breadcrumb: 'ADD PATIENT'
	}, ɵ4 = {
		authorities: ['ROLE_DEC'],
		title: 'Patient Edit',
		breadcrumb: 'PATIENT EDIT'
	};
	var PatientRoutes = [
		{
			path: '',
			data: ɵ0,
			children: [
				{
					path: '',
					component: PatientListComponent,
					resolve: {
						pagingParams: webCore.PagingParamsResolve
					},
					data: ɵ1,
				},
				{
					path: ':id/view',
					component: PatientDetailsComponent,
					resolve: {
						entity: PatientResolve
					},
					data: ɵ2,
				},
				{
					path: 'new',
					component: PatientEditComponent,
					data: ɵ3,
				},
				{
					path: ':id/edit',
					component: PatientEditComponent,
					resolve: {
						entity: PatientResolve
					},
					data: ɵ4,
				}
			]
		}
	];

	var PatientModule = /** @class */ (function () {
		function PatientModule() {
		}
		PatientModule = __decorate([
			core.NgModule({
				declarations: [
					PatientListComponent,
					PatientDetailsComponent,
					PatientEditComponent
				],
				imports: [
					common.CommonModule,
					ngJhipster.NgJhipsterModule,
					webCore.LamisSharedModule,
					webCore.JsonFormModule,
					material.MatInputModule,
					material.MatIconModule,
					material.MatDividerModule,
					material.MatCardModule,
					material.MatSelectModule,
					material.MatButtonModule,
					material.MatTabsModule,
					flexLayout.FlexLayoutModule,
					ngxDatatable.NgxDatatableModule,
					router.RouterModule.forChild(PatientRoutes),
					material.MatProgressBarModule,
					core$1.CovalentMessageModule,
					material.MatListModule,
					material.MatChipsModule,
					adfCore.CoreModule,
					core$1.CovalentSearchModule,
					ngBootstrap.NgbPaginationModule
				],
				exports: [
					PatientListComponent,
					PatientDetailsComponent,
					PatientEditComponent
				],
				providers: []
			})
		], PatientModule);
		return PatientModule;
	}());

	var PatientSettingComponent = /** @class */ (function () {
		function PatientSettingComponent(patientService) {
			this.patientService = patientService;
			this.indexing = false;
		}
		PatientSettingComponent.prototype.index = function () {
			var _this = this;
			this.indexing = true;
			this.patientService.reindex().subscribe(function (res) { return _this.indexing = false; });
		};
		PatientSettingComponent.ctorParameters = function () { return [
			{ type: PatientService }
		]; };
		PatientSettingComponent = __decorate([
			core.Component({
				selector: 'patient-settings',
				template: "<mat-card>\r\n    <mat-card-content>\r\n        <mat-progress-spinner\r\n                *ngIf=\"indexing\"\r\n                class=\"adf-document-list-loading-margin\"\r\n                [color]=\"'primary'\"\r\n                [mode]=\"'indeterminate'\">\r\n        </mat-progress-spinner>\r\n        <button mat-raised-button color=\"primary\"\r\n                [matTooltip]=\"'Re-Index Patients'\"\r\n                [disabled]=\"indexing\"\r\n                (click)=\"index()\">\r\n            <mat-icon>refresh</mat-icon>\r\n        </button>\r\n    </mat-card-content>\r\n</mat-card>\r\n"
			}),
			__metadata("design:paramtypes", [PatientService])
		], PatientSettingComponent);
		return PatientSettingComponent;
	}());

	var ɵ0$1 = {
		title: 'Patient Settings',
		breadcrumb: 'PATIENT SETTINGS'
	}, ɵ1$1 = {};
	var PatientSettingsRoutes = [
		{
			path: '',
			data: ɵ0$1,
			children: [
				{
					path: '',
					component: PatientSettingComponent,
					data: ɵ1$1,
				}
			]
		}
	];

	var PatientSettingsModule = /** @class */ (function () {
		function PatientSettingsModule(marshaller) {
			console.log('Marshaller', marshaller);
		}
		PatientSettingsModule.ctorParameters = function () { return [
			{ type: flexLayout.MediaMarshaller }
		]; };
		PatientSettingsModule = __decorate([
			core.NgModule({
				declarations: [
					PatientSettingComponent
				],
				exports: [
					PatientSettingComponent
				],
				imports: [
					common.CommonModule,
					material.MatButtonModule,
					webCore.LamisSharedModule,
					material.MatProgressSpinnerModule,
					material.MatCardModule,
					material.MatCardModule,
					material.MatIconModule,
					material.MatTooltipModule,
					router.RouterModule.forChild(PatientSettingsRoutes)
				]
			}),
			__metadata("design:paramtypes", [flexLayout.MediaMarshaller])
		], PatientSettingsModule);
		return PatientSettingsModule;
	}());

	exports.PatientListComponent = PatientListComponent;
	exports.PatientModule = PatientModule;
	exports.PatientService = PatientService;
	exports.PatientSettingComponent = PatientSettingComponent;
	exports.PatientSettingsModule = PatientSettingsModule;
	exports.ɵa = PatientDetailsComponent;
	exports.ɵb = PatientEditComponent;
	exports.ɵc = PatientResolve;
	exports.ɵd = PatientRoutes;
	exports.ɵe = PatientSettingsRoutes;

	Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=lamis-patient.umd.js.map
